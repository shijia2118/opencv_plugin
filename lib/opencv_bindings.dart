// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `opencv_bindings`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class OpencvBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  OpencvBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  OpencvBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// 比较图片相似度(直方图)
  ImageSimilarity compareImageSimilarityHist(
    ffi.Pointer<ffi.Char> image1Path,
    ffi.Pointer<ffi.Char> image2Path,
  ) {
    return _compareImageSimilarityHist(
      image1Path,
      image2Path,
    );
  }

  late final _compareImageSimilarityHistPtr = _lookup<
      ffi.NativeFunction<
          ImageSimilarity Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('compareImageSimilarityHist');
  late final _compareImageSimilarityHist =
      _compareImageSimilarityHistPtr.asFunction<
          ImageSimilarity Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// 计算图像模糊度的函数
  double calculateImageBlur(
    ffi.Pointer<ffi.Char> imagePath,
  ) {
    return _calculateImageBlur(
      imagePath,
    );
  }

  late final _calculateImageBlurPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'calculateImageBlur');
  late final _calculateImageBlur = _calculateImageBlurPtr
      .asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  /// 比较图片相似度(SSIM)
  ImageSimilarity compareImageSimilaritySSIM(
    ffi.Pointer<ffi.Char> imagePath1,
    ffi.Pointer<ffi.Char> imagePath2,
  ) {
    return _compareImageSimilaritySSIM(
      imagePath1,
      imagePath2,
    );
  }

  late final _compareImageSimilaritySSIMPtr = _lookup<
      ffi.NativeFunction<
          ImageSimilarity Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('compareImageSimilaritySSIM');
  late final _compareImageSimilaritySSIM =
      _compareImageSimilaritySSIMPtr.asFunction<
          ImageSimilarity Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// 比较图片相似度(哈希感知)
  ImageSimilarity compareImageSimilarityPhash(
    ffi.Pointer<ffi.Char> imagePath1,
    ffi.Pointer<ffi.Char> imagePath2,
  ) {
    return _compareImageSimilarityPhash(
      imagePath1,
      imagePath2,
    );
  }

  late final _compareImageSimilarityPhashPtr = _lookup<
      ffi.NativeFunction<
          ImageSimilarity Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('compareImageSimilarityPhash');
  late final _compareImageSimilarityPhash =
      _compareImageSimilarityPhashPtr.asFunction<
          ImageSimilarity Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// 获取相似图片数组
  SimilarityResult findSimilarImages(
    ffi.Pointer<ffi.Char> sourceImagePath,
    ffi.Pointer<ffi.Pointer<ffi.Char>> targetImagePaths,
    int listSize,
  ) {
    return _findSimilarImages(
      sourceImagePath,
      targetImagePaths,
      listSize,
    );
  }

  late final _findSimilarImagesPtr = _lookup<
      ffi.NativeFunction<
          SimilarityResult Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('findSimilarImages');
  late final _findSimilarImages = _findSimilarImagesPtr.asFunction<
      SimilarityResult Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();
}

/// 定义用于存储相似度数据的结构体
final class ImageSimilarity extends ffi.Struct {
  /// 相似度
  @ffi.Double()
  external double similarity;
}

final class SimilarityResult extends ffi.Struct {
  /// 相似图片路径
  external ffi.Pointer<ffi.Char> imagePath;

  /// 相似度
  @ffi.Double()
  external double similarity;
}
