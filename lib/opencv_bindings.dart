// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `opencv_bindings`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class OpencvBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  OpencvBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  OpencvBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// 计算图像模糊度的函数
  double calculateImageBlur(
    ffi.Pointer<ffi.Char> imagePath,
  ) {
    return _calculateImageBlur(
      imagePath,
    );
  }

  late final _calculateImageBlurPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'calculateImageBlur');
  late final _calculateImageBlur = _calculateImageBlurPtr
      .asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  /// 比较图片相似度(哈希感知)
  double compareImageSimilarityPhash(
    ffi.Pointer<ffi.Char> imagePath1,
    ffi.Pointer<ffi.Char> imagePath2,
  ) {
    return _compareImageSimilarityPhash(
      imagePath1,
      imagePath2,
    );
  }

  late final _compareImageSimilarityPhashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('compareImageSimilarityPhash');
  late final _compareImageSimilarityPhash =
      _compareImageSimilarityPhashPtr.asFunction<
          double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// 以图搜图(感知哈希算法)
  SimilarityResult imageSearchByPerceptualHash(
    ffi.Pointer<ffi.Char> targetImagePath,
    ffi.Pointer<ffi.Pointer<ffi.Char>> queryImagePaths,
    int numQueryImages,
  ) {
    return _imageSearchByPerceptualHash(
      targetImagePath,
      queryImagePaths,
      numQueryImages,
    );
  }

  late final _imageSearchByPerceptualHashPtr = _lookup<
      ffi.NativeFunction<
          SimilarityResult Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('imageSearchByPerceptualHash');
  late final _imageSearchByPerceptualHash =
      _imageSearchByPerceptualHashPtr.asFunction<
          SimilarityResult Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  /// 获取相似视频
  SimilarityResult findSimilarVideos(
    ffi.Pointer<ffi.Char> originalVideoPath,
    ffi.Pointer<ffi.Pointer<ffi.Char>> videoPaths,
    int videoCount,
  ) {
    return _findSimilarVideos(
      originalVideoPath,
      videoPaths,
      videoCount,
    );
  }

  late final _findSimilarVideosPtr = _lookup<
      ffi.NativeFunction<
          SimilarityResult Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('findSimilarVideos');
  late final _findSimilarVideos = _findSimilarVideosPtr.asFunction<
      SimilarityResult Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  /// 图片分类(聚类)
  ffi.Pointer<ffi.Int> clusterImages(
    ffi.Pointer<ffi.Pointer<ffi.Char>> imagePaths,
    int numImages,
    int K,
  ) {
    return _clusterImages(
      imagePaths,
      numImages,
      K,
    );
  }

  late final _clusterImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int, ffi.Int)>>('clusterImages');
  late final _clusterImages = _clusterImagesPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int, int)>();

  /// 比较2个视频相似度
  double compareVideoSimilarity(
    ffi.Pointer<ffi.Char> videoPath1,
    ffi.Pointer<ffi.Char> videoPath2,
  ) {
    return _compareVideoSimilarity(
      videoPath1,
      videoPath2,
    );
  }

  late final _compareVideoSimilarityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('compareVideoSimilarity');
  late final _compareVideoSimilarity = _compareVideoSimilarityPtr.asFunction<
      double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// 对视频进行聚类
  ffi.Pointer<ffi.Int> clusterVideos(
    ffi.Pointer<ffi.Pointer<ffi.Char>> videoPaths,
    int numVideos,
    int K,
  ) {
    return _clusterVideos(
      videoPaths,
      numVideos,
      K,
    );
  }

  late final _clusterVideosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int, ffi.Int)>>('clusterVideos');
  late final _clusterVideos = _clusterVideosPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int, int)>();
}

/// 定义用于存储相似度数据的结构体
final class ImageSimilarity extends ffi.Struct {
  /// 相似度
  @ffi.Double()
  external double similarity;
}

final class SimilarityResult extends ffi.Struct {
  /// 相似图片路径数组
  external ffi.Pointer<ffi.Pointer<ffi.Char>> imagePaths;

  /// 相似度数组
  external ffi.Pointer<ffi.Double> similarities;

  /// 数组长度
  @ffi.Int()
  external int length;
}
